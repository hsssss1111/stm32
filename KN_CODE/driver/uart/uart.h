/***********************************************Copyright (c)*********************************************
**                                Guangzou ZLG-MCU Development Co.,LTD.
**                                     
**                                       http://www.zlgmcu.com
**
**--------------File Info---------------------------------------------------------------------------------
** File name:			    uart.h
** Last modified Date:      2007-10-15
** Last Version:		    1.0
** Descriptions:		    uart头文件
**
**--------------------------------------------------------------------------------------------------------
** Created by:			    wengshujie
** Created date:		    2007-10-15
** Version:				    1.0
** Descriptions:		    该头文件在CONFIG.h中包括
**
**--------------------------------------------------------------------------------------------------------
** Modified by:		heshusheng		    
** Modified Date:		2009-02-20    
** Version:				 1.01   
** Descriptions:		 将输入参数由字符形式变为结构体形式省略了字符
**							串的解析工作。并将UART模块内部使用的接口调整到
**							uartpriv.h文件中，使调用UART更为清晰，并减低了UART
**							出现错误的可能性。
**
*********************************************************************************************************/
#ifndef __UART_H
#define __UART_H

/*********************************************************************************************************
   UART器件编号,用户不可修改
*********************************************************************************************************/
#define ID_UART1   0
#define ID_UART2   1
#define ID_UART3   2
#define ID_UART4   3
#define ID_UART5   4

/*********************************************************************************************************
   标识是接收队列还是发送队列,用户不可修改
*********************************************************************************************************/
#define RX_FIFO     0
#define TX_FIFO     1

/*********************************************************************************************************
   操作参数返回,用户不可修改
*********************************************************************************************************/
#define UART_OK             1                                           /*  串口操作成功                */                
#define UART_NOK            0                                           /*  串口操作失败                */

/*********************************************************************************************************
   串口接收事件
*********************************************************************************************************/
//extern OS_EVENT *poeUart0ReviceSem;                                    /*  接收UART0数据标志          */  
//extern OS_EVENT *poeUart1ReviceSem;                                    /*  接收UART1数据标志          */  
//extern OS_EVENT *poeUart2ReviceSem;                                    /*  接收UART2数据标志          */  
//extern OS_EVENT *poeUart3ReviceSem;                                    /*  接收UART3数据标志          */  

/*********************************************************************************************************
   用户传入的串口配置信息
*********************************************************************************************************/
typedef struct
{
	uint32	baudrate;		//波特率 9600--115200 
	uint32		databits;		//数据位5,6,7,8
	uint32		stopbits;		//停止位1,2
	uint32		parity;			//奇偶校验位0(no),1(奇)，2(偶)
	uint32		rtscontrol;		//流控位0(no),1(sw),2(hw)
}uart_param_type;
/*********************************************************************************************************
** 函数名称：UART1_IRQHandler
** 函数描述：UART0中断处理函数
** 输入参数：无
** 返回值  ：无
*********************************************************************************************************/
extern void USART1_IRQHandler( void );

/*********************************************************************************************************
** 函数名称：UART2_IRQHandler
** 函数描述：UART1中断处理函数
** 输入参数：无
** 返回值  ：无
*********************************************************************************************************/
extern void USART2_IRQHandler( void );

/*********************************************************************************************************
** 函数名称：UART3_IRQHandler
** 函数描述：UART2中断处理函数
** 输入参数：无
** 返回值  ：无
*********************************************************************************************************/
extern void USART3_IRQHandler( void );

/*********************************************************************************************************
** 函数名称：UART4_IRQHandler
** 函数描述：UART3中断处理函数
** 输入参数：无
** 返回值  ：无
*********************************************************************************************************/
extern void UART4_IRQHandler( void );

/*********************************************************************************************************
** 函数名称：UART5_IRQHandler
** 函数描述：UART4中断处理函数
** 输入参数：无
** 返回值  ：无
*********************************************************************************************************/
extern void UART5_IRQHandler( void );

/*********************************************************************************************************
** Function name:           uartInit
** Descriptions:            串口初始化
** input parameters:       data:	初始化参数配置；
**                          pRsv:       保留参数
** Output parameters:       NONE
** Returned value:			1:    操作成功
**                          0:       操作失败
*********************************************************************************************************/
void uartInit( void *data );

/*********************************************************************************************************
** Function name:           uartSetMode
** Descriptions:            设置串口的参数
** input parameters:        uiId      : 子设备号
**                          uiCmd     :设置参数宏:CTMODE--串口模式;BAUDRATE--串口波特率
**                          pcArg     :参数指针(外部申请空间)
** Output parameters:       NONE
** Returned value:			1:    操作成功
**                          0:       操作失败
*********************************************************************************************************/
extern int32 uartSetMode (uint32 uiId, uart_param_type *pcArg);

/*********************************************************************************************************
** Function name:           uartGetState
** Descriptions:            获取当前串口的参数
** input parameters:        uiId:               子设备号
**                          pcArg:              参数指针
** Output parameters:       pcArg:              输出字符串参数
** Returned value:			1:    操作成功
**                          0:       操作失败
*********************************************************************************************************/
extern int32 uartGetState (uint32 uiId, uart_param_type * pcArg);

/*********************************************************************************************************
** Function name:           uartFifoStatus
** Descriptions:            获取Queue队列的状态
** input parameters:        uiId:           子设备号
**                          uiWhichFifo:    TX_FIFO-发送队列;RX_FIFO-接收队列
** Returned value:          发送队列中可操作的空间大小，或接收队列中可用数据个数
*********************************************************************************************************/
extern int32 uartFifoStatus (uint32 uiId, uint32 uiWhichFifo);

/*********************************************************************************************************
** Function name:           uartFifoFlush
** Descriptions:            清空接收或发送Queue队列
** input parameters:        uiId:        UART子设备号
**                          uiWhichFifo: TX_FIFO-发送队列;RX_FIFO-接收队列
** Output parameters:       NONE
** Returned value:			1:    操作成功
**                          0:       操作失败
*********************************************************************************************************/
extern int32 uartFifoFlush (uint32 uiId, uint32 uiWhichFifo);

/*********************************************************************************************************
** Function name:           uartRead
** Descriptions:            从串口设备读取数据
** input parameters:        uiId:        子设备号
**                          puiBuf:      保存返回数据的字符串指针地址
**                          uiNum:       读取的数据个数
**                          pRsv:        保留参数
** Output parameters:       puiBuf:      读到的数据首地址      
** Returned value:          实际读取的数据个数
*********************************************************************************************************/
extern int32   uartRead (uint32 uiId,
                         uint8 *puiBuf,
                         uint32 uiNum);

/*********************************************************************************************************
** Function name:           uartWrite
** Descriptions:            向串口设备写数据
** input parameters:        uiId:       子设备号
**                          puiBuf:     输出数据的字符串指针地址
**                          uiNum:      一次写入的数据个数
**                          pRsv:       保留参数
** Output parameters:       NONE
** Returned value:          实际发送的数据个数
*********************************************************************************************************/
extern int32    uartWrite (uint32 uiId,
                           uint8 *puiBuf,
                           uint32 uiNum);


extern void uart_change2io( uint8 type);

/*********************************************************************************************************
** Function name:           uartDirectWrite
** Descriptions:            向串口设备直接发送数据
** input parameters:        uiId      : 子设备号
**                          uiData    : 输出的数据                            
**                          Rsv     : 保留参数(NULL)
** Output parameters:       NONE
** Returned value:          实际发送的数据个数(1或0);
*********************************************************************************************************/
extern int32   uartDirectWrite (uint32 uiId, uint8 uiData);

extern void uartDirectWait(uint32 uiId);

extern void uart_change2io( uint8 type);

#endif                                                                  /*  __UART_H                    */
/*********************************************************************************************************
   END FILE
*********************************************************************************************************/
